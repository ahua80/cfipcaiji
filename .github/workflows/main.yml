# 工作流程名称
name: Update IP List (Truncated)

# 定义工作流程触发事件
on:
  schedule:
    - cron: '0 */3 * * *' # 每3小时运行一次 (UTC)
  workflow_dispatch: # 允许手动触发
  # push: # 允许提交触发 (⚠️ 强烈建议移除此行，以避免与最后的 push 步骤结合导致无限循环！)
       # 如果您之前已经移除或注释掉了 push 触发器，请保持原样，或者删除此行。

jobs: # 作业定义开始

  update-truncated-ip-list: # 作业名称，修改以反映只保留前 5 行并提交
    runs-on: ubuntu-latest # 作业运行环境

    steps: # 步骤列表开始，以下每个 '-' 开头的 step 都应该对齐到这个级别

    - name: Checkout code # 步骤 1: 检出代码
      uses: actions/checkout@v3 # 使用 actions/checkout@v3

    - name: Set up Python # 步骤 2: 设置 Python 环境
      uses: actions/setup-python@v4 # 使用 actions/setup-python@v4
      with:
        python-version: '3.9' # 根据您的 collect_ips.py 需要的 Python 版本进行修改

    - name: Install dependencies # 步骤 3: 安装 Python 依赖
      run: | # 运行多行命令
        python -m pip install --upgrade pip
        # 安装 collect_ips.py 所需的 Python 库，根据您的实际 requirements 修改
        pip install requests
        pip install beautifulsoup4

    - name: Run script # 步骤 4: 运行 collect_ips.py 脚本生成完整的 ip.txt
      run: python ${{ github.workspace }}/collect_ips.py
      # 确保 collect_ips.py 在仓库的相对路径 ${{ github.workspace }} 下（通常就是仓库根目录）。
      # 并且它会生成完整的 ip.txt 文件在期望的位置（通常也是仓库根目录）。

    # --- 新的步骤：截断 ip.txt 文件 ---

    - name: Truncate ip.txt to first 5 lines # 步骤 5: 只保留 ip.txt 的前 5 行并覆盖原文件
      run: | # 运行多行命令
        # 假设 ip.txt 文件在仓库根目录
        IP_FILE="ip.txt" # <-- **如果 ip.txt 生成在子目录，请修改这里的路径，例如：'output/ip.txt'**
        TEMP_FILE="ip_temp.txt" # 使用临时文件进行操作

        echo "Attempting to truncate ${IP_FILE} to first 5 lines..."
        # 检查 ip.txt 文件是否存在（确保 Run script 步骤成功）
        if [ -f "$IP_FILE" ]; then
          # 使用 head -n 5 提取前 5 行，并将输出重定向到一个临时文件
          head -n 5 "$IP_FILE" > "$TEMP_FILE"
          # 将临时文件移动并覆盖原文件 ip.txt
          mv "$TEMP_FILE" "$IP_FILE"
          echo "${IP_FILE} now contains only the first 5 lines."
        else
          echo "Error: ${IP_FILE} not found after Run script step. Cannot truncate."
          # 如果 ip.txt 不存在，则让这个步骤失败
          exit 1
        fi

    # --- 邮件发送相关的步骤已移除 ---

    - name: Commit and push changes # 步骤 6: 提交并推送更改 (现在提交的是只包含前 5 行的 ip.txt)
      run: | # 运行多行命令
        git config --global user.email "tianshideyou@proton.me" # Git 用户邮箱
        git config --global user.name "tianshipapa" # Git 用户名
        # 检查 ip.txt 是否有更改（因为它已经被截断并覆盖了，通常会认为有更改）
        # 即使 Run script step 没有产生新内容，Truncate step 也会执行覆盖操作，git status 会检测到变动
        IP_FILE="ip.txt" # <-- **如果 ip.txt 在子目录，请修改这里的路径**
        if [ -f "$IP_FILE" ] && [ -n "$(git status --porcelain "$IP_FILE")" ]; then # 检查文件存在且有变动
          git add "$IP_FILE" # 添加修改后 (只包含前 5 行) 的 ip.txt 文件
          git commit -m "Automatic update ip.txt (truncated to 5 lines)" # 提交更改 (修改提交信息以更准确)
          git push # 推送到仓库 - **小心无限循环风险!**
          echo "Changes in $IP_FILE committed and pushed."
        else
          echo "No changes detected in $IP_FILE after truncation, skipping commit." # 文件未变动则跳过
        fi
        # 注意：这里只处理并提交了修改后的 ip.txt 文件。
