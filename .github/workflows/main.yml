# 工作流程名称
name: Update IP List and Email First 5 Lines

# 定义工作流程触发事件
on:
  schedule:
    - cron: '0 */3 * * *' # 每3小时运行一次 (UTC)
  workflow_dispatch: # 允许手动触发
  # push: # 允许提交触发 (⚠️ 注意：此触发器与最后的 push 步骤结合可能导致无限循环，强烈建议继续移除或注释掉!)
       # 如果您之前已经移除或注释掉了 push 触发器，请保持原样。

jobs: # 作业定义开始

  update-ip-list: # 单个作业名称
    runs-on: ubuntu-latest # 作业运行环境

    steps: # 步骤列表开始，以下每个 '-' 开头的 step 都应该对齐到这个级别

    - uses: actions/checkout@v3 # 步骤 1: 检出代码

    - name: Set up Python # 步骤 2: 设置 Python 环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9' # 根据需要修改 Python 版本

    - name: Install dependencies # 步骤 3: 安装依赖
      run: | # 运行多行命令
        python -m pip install --upgrade pip
        pip install requests
        pip install beautifulsoup4 # 根据 collect_ips.py 的实际依赖修改

    - name: Run script # 步骤 4: 运行生成 ip.txt 的脚本
      run: python ${{ github.workspace }}/collect_ips.py
      # 确保 collect_ips.py 在仓库根目录 ${{ github.workspace }} 下，
      # 并且它会生成 ip.txt 文件在期望的位置（通常也是仓库根目录）。

    # --- 新添加的步骤 ---

    - name: Extract first 5 lines # 步骤 5 (新): 提取 ip.txt 的前 5 行并保存到新文件
      run: | # 运行多行命令
        # 检查 ip.txt 文件是否存在（它应该在 Run script 步骤中生成了）
        if [ -f ip.txt ]; then
          echo "Extracting first 5 lines from ip.txt..."
          # 使用 head -n 5 提取前 5 行，并将输出重定向到新文件 ip_first_5_lines.txt
          head -n 5 ip.txt > ip_first_5_lines.txt
          echo "First 5 lines extracted to ip_first_5_lines.txt"
        else
          echo "ip.txt not found after Run script step. Cannot extract first 5 lines."
          # 如果 ip.txt 不存在，则让这个步骤失败，这样邮件发送步骤也不会执行
          exit 1
        fi

    - name: Send first 5 lines via Email # 步骤 6: 发送邮件 (修改名称以更清晰)
      # 使用 dawidd6/action-send-mail 的 v5 版本（根据您之前确认的信息）
      uses: dawidd6/action-send-mail@v5 # <-- 使用 v5 版本
      # 条件：只有 Extraction 步骤成功，并且新文件 ip_first_5_lines.txt 存在
      # 我们在 Extraction 步骤中如果 ip.txt 不存在就会 exit 1，所以这里简化条件
      if: success()

      with: # 配置邮件发送 Action 的参数
        # 从 Secrets 获取邮件服务器地址
        server_address: ${{ secrets.EMAIL_SERVER_ADDRESS }}
        # 根据您尝试的配置，使用 587 端口
        server_port:    587 # <-- 端口设置为 587

        # 从 Secrets 获取用户名和密码
        username:       ${{ secrets.EMAIL_USERNAME }}
        password:       ${{ secrets.EMAIL_PASSWORD }}

        # 使用之前尝试过的 secure 设置（Action v5 可能只识别 secure）
        secure: true   # <-- 根据 Action v5 的警告，使用 secure: true，即使端口是 587

        # 设置邮件主题，修改以反映内容
        subject: 'cfipcaiji 定时发送的 IP 列表 (前5行)' # <-- 修改邮件主题

        # 设置邮件正文，修改以反映内容
        body: |
                项目 cfipcaiji 定时任务执行完成。
                附件是 ip.txt 文件的前5行数据。
                --
                任务执行时间 (UTC): $(date -u)
                工作流程运行ID: ${{ github.run_id }}
                触发事件: ${{ github.event_name }}

        # 收件人邮箱地址
        to: 'ahua80@hotmail.com' # <-- **请务必修改为您的正确收件人地址**

        # 设置附件，**指向新生成的文件**
        attachments: |
          ip_first_5_lines.txt # <-- 附件是提取的前 5 行文件

        # 发件人信息，解决 "Input required and not supplied: from" 错误
        from: 'cfipcaiji GitHub Actions <${{ secrets.EMAIL_USERNAME }}>' # <-- 确保这行存在且未注释

        # --- 其他可选的高级配置 ---
        # ... (保持不变或根据需要调整)
        # ignore_cert: true # 如果之前的 TLS 连接错误依然存在，且确定是证书问题，可以考虑启用（不推荐常规使用）
        # ------------------------------------

    # --- 新添加的步骤结束 ---

    - name: Commit and push changes # 步骤 7: 提交并推送更改 (步骤编号已调整)
      run: | # 运行多行命令
        git config --global user.email "tianshideyou@proton.me" # 用户邮箱
        git config --global user.name "tianshipapa" # 用户名
        # 之前 Check step 已经确保 ip.txt 存在，这里的 git status 检查是否改动
        if [ -n "$(git status --porcelain ip.txt)" ]; then # 只检查 ip.txt 是否有变动
          git add ip.txt # 添加 ip.txt 文件 (注意：这里是添加 *完整* 的 ip.txt 文件到暂存区)
          git commit -m "Automatic update ip.txt" # 提交更改 (建议修改一下提交信息)
          git push # 推送到仓库
          echo "Changes in ip.txt committed and pushed."
        else
          echo "No changes detected in ip.txt, skipping commit." # 没有更改则跳过
        fi
        # 注意：ip_first_5_lines.txt 是临时文件，不会被 git add/commit 提交到仓库
