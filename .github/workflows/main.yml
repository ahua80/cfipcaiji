# 工作流程名称
name: Update IP List

# 定义工作流程触发事件
on:
  schedule:
    - cron: '0 */3 * * *' # 每3小时运行一次 (UTC)
  workflow_dispatch: # 允许手动触发
  # push: # 允许提交触发 (⚠️ 注意：此触发器与最后的 push 步骤结合可能导致无限循环，强烈建议继续移除或注释掉!)
       # 如果您之前已经移除或注释掉了 push 触发器，请保持原样。

jobs: # 作业定义开始

  update-ip-list: # 单个作业名称
    runs-on: ubuntu-latest # 作业运行环境

    steps: # 步骤列表开始，以下每个 '-' 开头的 step 都应该对齐到这个级别

    - uses: actions/checkout@v3 # 步骤 1: 检出代码

    - name: Set up Python # 步骤 2: 设置 Python 环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9' # 根据需要修改 Python 版本

    - name: Install dependencies # 步骤 3: 安装依赖
      run: | # 运行多行命令
        python -m pip install --upgrade pip
        pip install requests
        pip install beautifulsoup4 # 根据 collect_ips.py 的实际依赖修改

    - name: Run script # 步骤 4: 运行生成 ip.txt 的脚本
      run: python ${{ github.workspace }}/collect_ips.py
      # 确保 collect_ips.py 在仓库根目录 ${{ github.workspace }} 下，
      # 并且它会生成 ip.txt 文件在期望的位置（通常也是仓库根目录）。

    # --- 新添加的步骤：截取文件前 5 行 ---

    - name: Truncate ip.txt to first 5 lines # 步骤 5 (新): 只保留 ip.txt 的前 5 行
      run: | # 运行多行命令
        # 假设 ip.txt 文件在仓库根目录
        IP_FILE="ip.txt"
        TEMP_FILE="ip_temp.txt"

        # 检查 ip.txt 文件是否存在（确保 Run script 步骤成功）
        if [ -f "$IP_FILE" ]; then
          echo "Truncating $IP_FILE to first 5 lines..."
          # 使用 head -n 5 提取前 5 行，并写入一个临时文件
          head -n 5 "$IP_FILE" > "$TEMP_FILE"
          # 将临时文件移动并覆盖原文件
          mv "$TEMP_FILE" "$IP_FILE"
          echo "$IP_FILE now contains only the first 5 lines."
        else
          echo "Error: $IP_FILE not found after Run script step. Cannot truncate."
          # 如果 ip.txt 不存在，则让这个步骤失败
          exit 1
        fi

    # --- 邮件发送步骤已移除 ---
    # 原来的 Check if ip.txt was generated 步骤 (如果存在的话) 已移除
    # 原来的 Send ... via Email 步骤 (如果存在的话) 已移除

    - name: Commit and push changes # 步骤 6: 提交并推送更改 (步骤编号已调整)
      run: | # 运行多行命令
        git config --global user.email "tianshideyou@proton.me" # 用户邮箱
        git config --global user.name "tianshipapa" # 用户名
        # 检查 ip.txt 是否有更改（因为已经截取了前 5 行，只要 run script 有输出，通常都会有更改）
        if [ -n "$(git status --porcelain ip.txt)" ]; then # 只检查 ip.txt 是否有变动
          git add ip.txt # 添加修改后的 ip.txt 文件 (只包含前 5 行)
          git commit -m "Automatic update ip.txt (first 5 lines)" # 提交更改 (建议修改一下提交信息)
          git push # 推送到仓库
          echo "Changes in ip.txt committed and pushed."
        else
          echo "No changes detected in ip.txt, skipping commit." # 没有更改则跳过
        fi
