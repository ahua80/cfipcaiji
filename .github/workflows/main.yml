# 工作流程名称
name: Update IP List and Email First 5 Lines

# 定义工作流程触发事件
on:
  schedule:
    - cron: '0 */3 * * *' # 每3小时运行一次 (UTC)
  workflow_dispatch: # 允许手动触发
  # push: # 允许提交触发 (⚠️ 注意：此触发器与最后的 push 步骤结合可能导致无限循环，强烈建议继续移除或注释掉!)
       # 如果您之前已经移除或注释掉了 push 触发器，请保持原样，或者删除此行。

jobs: # 作业定义开始

  update-ip-list: # 作业名称
    runs-on: ubuntu-latest # 作业运行环境

    steps: # 步骤列表开始，以下每个 '-' 开头的 step 都应该对齐到这个级别

    - name: Checkout code # 步骤 1: 检出代码
      uses: actions/checkout@v3

    - name: Set up Python # 步骤 2: 设置 Python 环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9' # 根据您的 collect_ips.py 需要的 Python 版本进行修改

    - name: Install dependencies # 步骤 3: 安装 Python 依赖
      run: | # 运行多行命令
        python -m pip install --upgrade pip
        # 安装 collect_ips.py 所需库，根据您的实际 requirements 修改
        pip install requests
        pip install beautifulsoup4

    - name: Run script # 步骤 4: 运行 collect_ips.py 脚本生成 ip.txt
      run: python ${{ github.workspace }}/collect_ips.py
      # 确保 collect_ips.py 在仓库根目录 ${{ github.workspace }} 下，
      # 并且它会生成完整的 ip.txt 文件在期望的位置（通常也是仓库根目录）。

    # --- 新添加的步骤 ---

    - name: Extract first 5 lines # 步骤 5: 提取 ip.txt 的前 5 行并保存到新文件
      run: | # 运行多行命令
        # 假设 collect_ips.py 生成的 ip.txt 文件在仓库根目录
        IP_FILE="ip.txt" # <-- 如果 ip.txt 生成在子目录，请修改这里的路径，例如：'output/ip.txt'
        FIRST_5_LINES_FILE="ip_first_5_lines.txt" # 生成的新文件名称

        echo "Attempting to extract first 5 lines from ${IP_FILE}..."
        # 检查 ip.txt 文件是否存在
        if [ -f "$IP_FILE" ]; then
          # 使用 head -n 5 提取前 5 行，并将输出重定向到新文件
          head -n 5 "$IP_FILE" > "$FIRST_5_LINES_FILE"
          echo "First 5 lines extracted to ${FIRST_5_LINES_FILE}"
          # 检查生成的新文件是否为空，避免发送空附件 (如果 ip.txt 行数少于 5)
          if [ -s "$FIRST_5_LINES_FILE" ]; then
            echo "${FIRST_5_LINES_FILE} is not empty."
            echo "first_5_lines_exists=true" >> $GITHUB_OUTPUT # 设置输出变量，供后续步骤判断
          else
            echo "${FIRST_5_LINES_FILE} is empty."
            echo "first_5_lines_exists=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "Error: ${IP_FILE} not found after Run script step. Cannot extract first 5 lines."
          echo "first_5_lines_exists=false" >> $GITHUB_OUTPUT
          # 如果 ip.txt 不存在，这个步骤不会失败，但后续发送邮件会因为文件不存在而跳过
          # 如果希望文件不存在就让整个任务失败，可以在这里加 exit 1
        fi
      id: extract_lines # 给这个步骤一个ID，方便后续引用

    - name: Send first 5 lines via Email # 步骤 6: 发送邮件
      # 使用 dawidd6/action-send-mail 的 v5 版本
      uses: dawidd6/action-send-mail@v5 # <-- 确保 Action 版本正确

      ## 条件：只有 Extraction 步骤成功，并且检测到新文件 "ip_first_5_lines.txt" 存在且不为空
      ## 通过 steps.extract_lines.outputs.first_5_lines_exists 检查上一步的输出
      if: ${{ success() && steps.extract_lines.outputs.first_5_lines_exists == 'true' }}

      with: # 配置邮件发送 Action 的参数
        # SMTP 服务器配置，从 Secrets 中获取。确保 Secrets 已正确配置为 iCloud 邮箱信息。
        server_address: ${{ secrets.EMAIL_SERVER_ADDRESS }} # 比如 smtp.mail.me.com 或 smtp.icloud.com
        server_port:    587 # <-- 尝试使用 587 端口 (iCloud 推荐)
        username:       ${{ secrets.EMAIL_USERNAME }} # 您的完整 iCloud 邮箱地址
        password:       ${{ secrets.EMAIL_PASSWORD }} # <-- **iCloud 应用专用密码**，不是主要 Apple ID 密码

        # 加密方式：根据 Action v5 的参数和 iCloud 常规配置
        # iCloud SMTP (587) 常使用 STARTTLS (显式 TLS)。Action v5 使用 secure 控制加密。
        # 结合 587 端口和 secure: true，Action 可能会尝试 STARTTLS。
        # 如果遇到 TLS 错误 (wrong version number)，可能需要调整端口或 secure/tls 设置。
        secure: true   # <-- 使用 Action v5 接受的 secure 参数
        # tls: true    # <-- Action v5 不支持 tls 参数，请保持注释

        # 设置邮件主题
        subject: 'cfipcaiji 定时发送的 IP 列表 (前5行)' # <-- 您可以修改邮件主题

        # 设置邮件正文
        body: |
                项目 cfipcaiji 定时任务执行完成。
                附件是 ip.txt 文件的前5行数据。
                --
                任务执行时间 (UTC): $(date -u)
                工作流程运行ID: ${{ github.run_id }}
                触发事件: ${{ github.event_name }}

        # 收件人邮箱地址 - 务必修改为您的正确收件人地址
        # 可以是您的 iCloud 邮箱或其他邮箱
        to: 'ahua80@icloud.com' # <-- **请务必修改为您的正确收件人地址！**

        # 设置发件人信息 - 必需项，解决 "Input required and not supplied: from" 错误
        from: 'cfipcaiji GitHub Actions <${{ secrets.EMAIL_USERNAME }}>' # <-- 确保这行存在且未注释，名称请修改

        # 设置附件，指向新生成的文件
        # 文件路径是相对于 GitHub Actions 工作目录 (通常是仓库根目录 ${GITHUB_WORKSPACE})
        attachments: |
          ip_first_5_lines.txt # <-- **如果文件生成在子目录，需要修改这里的路径**

        # --- 其他可选的高级配置 ---
        # cc: ''
        # bcc: ''
        # reply_to: ''
        # ignore_cert: true # 如果遇到证书问题，可以尝试启用，但不安全
        # priority: 'normal'
        # nodemailerlog: false
        # nodemailerdebug: false
        # envelope_from: ''
        # envelope_to: ''

    # --- 新建步骤结束 ---

    - name: Commit and push changes # 步骤 7: 提交并推送完整 ip.txt 更改
      run: | # 运行多行命令
        git config --global user.email "tianshideyou@proton.me" # 用户邮箱
        git config --global user.name "tianshipapa" # 用户名
        # 检查原始 ip.txt 文件是否有更改（因为 run script step 进行了更新）
        IP_FILE="ip.txt" # <-- 如果 ip.txt 在子目录，请修改这里的路径
        if [ -f "$IP_FILE" ] && [ -n "$(git status --porcelain "$IP_FILE")" ]; then # 检查文件存在且有变动
          git add "$IP_FILE" # 添加修改后的 ip.txt 文件 (注意：这里是添加 *完整* 的 ip.txt 文件到暂存区)
          git commit -m "Automatic update ip.txt" # 提交更改 (建议修改一下提交信息)
          git push # 推送到仓库 - **注意这里的无限循环风险 if on: push: is enabled!**
          echo "Changes in $IP_FILE committed and pushed."
        else
          echo "No changes detected in $IP_FILE, skipping commit." # 没有更改或文件不存在则跳过
        fi
        # 注意：ip_first_5_lines.txt (只包含前5行) 是临时文件，不会被 git add/commit 提交到仓库
